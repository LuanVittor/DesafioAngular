{"ast":null,"code":"import _asyncToGenerator from \"/home/luan/Angular_Desafio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { BoardComponent } from './board.component';\ndescribe('BoardComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [BoardComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(BoardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('setup Players name ', () => {\n    it('you can define the player1 name', () => {\n      component.definePlayer1({\n        target: {\n          value: 'Player 1'\n        }\n      });\n      expect(component.player1).toBe('Player 1');\n    });\n    it('you can define the player2 name', () => {\n      component.definePlayer2({\n        target: {\n          value: 'Player 2'\n        }\n      });\n      expect(component.player2).toBe('Player 2');\n    });\n  });\n  describe('start a new game', () => {\n    it('should NOT be able to start a new game withiut a player two name', () => {\n      component.definePlayer1({\n        target: {\n          value: 'Player 1'\n        }\n      }); // expect(fixture.debugElement.query(By.css('startGame')).nativeElement).toBeFalsy();\n\n      expect(compone);\n      expect(component.readyToStart).toBeFalsy();\n    });\n    it('should be able to start a new game', () => {\n      component.definePlayer1({\n        target: {\n          value: 'Player 1'\n        }\n      });\n      component.definePlayer2({\n        target: {\n          value: 'Player 2'\n        }\n      });\n      component.newGame();\n      expect(component.readyToStart).toBeTruthy();\n      expect(component.squares).toEqual(Array(9).fill(null));\n      expect(component.winner).toBeNull();\n      expect(component.xIsNext).toBeTruthy();\n      expect(component.tied).toBeFalse();\n      expect(component.finishGame).toBeFalse();\n    });\n  });\n});","map":{"version":3,"sources":["/home/luan/Angular_Desafio/src/app/board/board.component.spec.ts"],"names":["TestBed","BoardComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","definePlayer1","target","value","player1","toBe","definePlayer2","player2","compone","readyToStart","toBeFalsy","newGame","squares","toEqual","Array","fill","winner","toBeNull","xIsNext","tied","toBeFalse","finishGame"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { BoardComponent } from './board.component';\ndescribe('BoardComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [BoardComponent]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(BoardComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    describe('setup Players name ', () => {\n        it('you can define the player1 name', () => {\n            component.definePlayer1({ target: { value: 'Player 1' } });\n            expect(component.player1).toBe('Player 1');\n        });\n        it('you can define the player2 name', () => {\n            component.definePlayer2({ target: { value: 'Player 2' } });\n            expect(component.player2).toBe('Player 2');\n        });\n    });\n    describe('start a new game', () => {\n        it('should NOT be able to start a new game withiut a player two name', () => {\n            component.definePlayer1({ target: { value: 'Player 1' } });\n            // expect(fixture.debugElement.query(By.css('startGame')).nativeElement).toBeFalsy();\n            expect(compone);\n            expect(component.readyToStart).toBeFalsy();\n        });\n        it('should be able to start a new game', () => {\n            component.definePlayer1({ target: { value: 'Player 1' } });\n            component.definePlayer2({ target: { value: 'Player 2' } });\n            component.newGame();\n            expect(component.readyToStart).toBeTruthy();\n            expect(component.squares).toEqual(Array(9).fill(null));\n            expect(component.winner).toBeNull();\n            expect(component.xIsNext).toBeTruthy();\n            expect(component.tied).toBeFalse();\n            expect(component.finishGame).toBeFalse();\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"module"}